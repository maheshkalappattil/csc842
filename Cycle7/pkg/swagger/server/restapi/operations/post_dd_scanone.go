// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostDdScanoneHandlerFunc turns a function with the right signature into a post dd scanone handler
type PostDdScanoneHandlerFunc func(PostDdScanoneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDdScanoneHandlerFunc) Handle(params PostDdScanoneParams) middleware.Responder {
	return fn(params)
}

// PostDdScanoneHandler interface for that can handle valid post dd scanone params
type PostDdScanoneHandler interface {
	Handle(PostDdScanoneParams) middleware.Responder
}

// NewPostDdScanone creates a new http.Handler for the post dd scanone operation
func NewPostDdScanone(ctx *middleware.Context, handler PostDdScanoneHandler) *PostDdScanone {
	return &PostDdScanone{Context: ctx, Handler: handler}
}

/*
	PostDdScanone swagger:route POST /dd/scanone postDdScanone

scans given email thread!
*/
type PostDdScanone struct {
	Context *middleware.Context
	Handler PostDdScanoneHandler
}

func (o *PostDdScanone) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostDdScanoneParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostDdScanoneOKBody post dd scanone o k body
//
// swagger:model PostDdScanoneOKBody
type PostDdScanoneOKBody struct {

	// action
	Action *PostDdScanoneOKBodyAction `json:"action,omitempty"`
}

// Validate validates this post dd scanone o k body
func (o *PostDdScanoneOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDdScanoneOKBody) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(o.Action) { // not required
		return nil
	}

	if o.Action != nil {
		if err := o.Action.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDdScanoneOK" + "." + "action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDdScanoneOK" + "." + "action")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post dd scanone o k body based on the context it is used
func (o *PostDdScanoneOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDdScanoneOKBody) contextValidateAction(ctx context.Context, formats strfmt.Registry) error {

	if o.Action != nil {
		if err := o.Action.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDdScanoneOK" + "." + "action")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDdScanoneOK" + "." + "action")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostDdScanoneOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDdScanoneOKBody) UnmarshalBinary(b []byte) error {
	var res PostDdScanoneOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostDdScanoneOKBodyAction action
//
// swagger:model PostDdScanoneOKBodyAction
type PostDdScanoneOKBodyAction struct {

	// notification
	Notification *PostDdScanoneOKBodyActionNotification `json:"notification,omitempty"`
}

// Validate validates this post dd scanone o k body action
func (o *PostDdScanoneOKBodyAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNotification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDdScanoneOKBodyAction) validateNotification(formats strfmt.Registry) error {
	if swag.IsZero(o.Notification) { // not required
		return nil
	}

	if o.Notification != nil {
		if err := o.Notification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDdScanoneOK" + "." + "action" + "." + "notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDdScanoneOK" + "." + "action" + "." + "notification")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post dd scanone o k body action based on the context it is used
func (o *PostDdScanoneOKBodyAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNotification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDdScanoneOKBodyAction) contextValidateNotification(ctx context.Context, formats strfmt.Registry) error {

	if o.Notification != nil {
		if err := o.Notification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDdScanoneOK" + "." + "action" + "." + "notification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDdScanoneOK" + "." + "action" + "." + "notification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostDdScanoneOKBodyAction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDdScanoneOKBodyAction) UnmarshalBinary(b []byte) error {
	var res PostDdScanoneOKBodyAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostDdScanoneOKBodyActionNotification notification
//
// swagger:model PostDdScanoneOKBodyActionNotification
type PostDdScanoneOKBodyActionNotification struct {

	// text
	Text string `json:"text,omitempty"`
}

// Validate validates this post dd scanone o k body action notification
func (o *PostDdScanoneOKBodyActionNotification) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post dd scanone o k body action notification based on context it is used
func (o *PostDdScanoneOKBodyActionNotification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostDdScanoneOKBodyActionNotification) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDdScanoneOKBodyActionNotification) UnmarshalBinary(b []byte) error {
	var res PostDdScanoneOKBodyActionNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
